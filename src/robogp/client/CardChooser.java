package robogp.client;

import robogp.client.gui.GuiGiocare;
import connection.Connection;
import connection.Message;
import connection.PartnerShutDownException;
import robogp.matchmanager.*;
import java.awt.Color;
import java.awt.Component;
import java.util.List;
import java.util.Observable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.util.Pair;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import robogp.cards.Card;
import robogp.cards.GlobalPool;
import robogp.logic.Logic;
import robogp.matchmanager.RobotMatch;

/**
 *
 * @author claudia
 */
public class CardChooser extends javax.swing.JDialog {

    private final DefaultListModel<Card> model;
    private int closeStatus;
    public GlobalPool gp;
    private int nRobots;
    private RobotMatch rm;
    Connection connToServer;
    Add a;
    private GuiGiocare g;
    private int tab;

    /**
     * Creates new form RobotChooser
     */
    public CardChooser(RobotMatch rm, Logic logic, Connection connToServer, GuiGiocare g, int tab) {
        initComponents();
        this.connToServer = connToServer;
        this.tab = tab;
        this.rm = rm;
        model = new DefaultListModel<>();
        this.cardList.setModel(model);
        this.cardList.setCellRenderer(new CardCellRenderer());
        this.closeStatus = JOptionPane.CANCEL_OPTION;
        this.g = g;
        a = new Add();
        a.addObserver(rm.getPl());

        fillList(logic);
        setup();
    }

    public void setup() {

        this.choiceLabel.setText("Programma robot: " + rm.getRobotMarker().getName());
        this.model.clear();
        for (int i = 0; i < (rm.getHp() - 1); i++) {
            model.addElement(gp.getDeck().get(i));
        }
    }

    private void fillList(Logic logic) {
        gp = new GlobalPool(logic);
        gp.shuffle();

    }

    public List<Card> getSelection() {
        return this.cardList.getSelectedValuesList();
    }

    public int getCloseStatus() {
        return this.closeStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        choiceLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cardList = new javax.swing.JList<>();
        javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(200, 400));
        setMinimumSize(new java.awt.Dimension(145, 400));

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jPanel1.setMaximumSize(new java.awt.Dimension(600, 1200));
        jPanel1.setMinimumSize(new java.awt.Dimension(300, 600));
        jPanel1.setPreferredSize(new java.awt.Dimension(300, 600));
        jPanel1.setLayout(new java.awt.BorderLayout(5, 5));

        choiceLabel.setText("jLabel1");
        jPanel1.add(choiceLabel, java.awt.BorderLayout.NORTH);

        jScrollPane1.setViewportView(cardList);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        okButton.setText("Conferma programma");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        jPanel2.add(okButton);

        jPanel1.add(jPanel2, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed

        if (this.cardList.getSelectedIndices().length != 5) {
            JOptionPane.showMessageDialog(this, "Devi assegnare 5 carte ai registri ne hai scelti "
                    + this.cardList.getSelectedIndices().length, "Errore", JOptionPane.ERROR_MESSAGE);
            return;
        }
       
       
        for (int i = 0; i < 5; i++) {
            Card c = cardList.getSelectedValuesList().get(i);
            a.addCard(c);
            if (g.getPersonalRbTab().getTitleAt(tab).equals(rm.getRobotMarker().getName())) {
                switch(tab){
                    case 0:
                         g.getPlPersonalTab1().append(c.getName() + "\n");
                         
                        break;
                         case 1:
                         g.getPlPersonalTab2().append(c.getName() + "\n");
                         
                        break;
                         case 2:
                         g.getPlPersonalTab3().append(c.getName() + "\n");
                         
                        break;
                         case 3:
                         g.getPlPersonalTab4().append(c.getName() + "\n");
                         
                        break;
                
            }
            }
           
        }

        // invio messaggio con robot 
        Message msg = new Message(Match.MatchListCards);
        msg.setParameters(new Object[]{rm});
        try {
            connToServer.sendMessage(msg);
        } catch (PartnerShutDownException ex) {
            Logger.getLogger(CardChooser.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.closeStatus = JOptionPane.OK_OPTION;
        this.setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    class CardCellRenderer extends DefaultListCellRenderer {

        private final JLabel label;
        private final Color textSelectionColor = Color.BLACK;
        private final Color backgroundSelectionColor = Color.YELLOW;
        private final Color textNonSelectionColor = Color.BLACK;
        private final Color backgroundNonSelectionColor = Color.WHITE;

        CardCellRenderer() {
            label = new JLabel();
            label.setOpaque(true);
        }

        @Override
        public Component getListCellRendererComponent(
                JList list,
                Object value,
                int index,
                boolean selected,
                boolean expanded) {

            Card c = (Card) value;
            label.setIcon(new ImageIcon(c.getImage()));
            label.setText(c.getName() + " prioritÃ : " + c.getPriority());

            if (selected) {
                label.setBackground(backgroundSelectionColor);
                label.setForeground(textSelectionColor);

            } else {
                label.setBackground(backgroundNonSelectionColor);
                label.setForeground(textNonSelectionColor);
            }

            return label;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<Card> cardList;
    private javax.swing.JLabel choiceLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

    class Add extends Observable {

        private void addCard(Card c) {
            setChanged();
            notifyObservers(new Pair<>(true, c));
        }

        private void removeCard(Card c) {
            setChanged();
            notifyObservers(new Pair<>(false, c));
        }
    }

}
